.PHONY: help dev build up down logs test lint fmt clean install train export-onnx bench

help: ## Show this help message
	@echo 'Usage: make [target]'
	@echo ''
	@echo 'Targets:'
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST)

# Development Environment
dev: ## Start development environment (app + redis)
	docker-compose up --build app redis

all: ## Start all services (app + worker + redis + prometheus + grafana)
	docker-compose up --build

worker: ## Start celery worker
	docker-compose up --build worker

build: ## Build Docker images
	docker-compose build

up: ## Start services in background
	docker-compose up -d

down: ## Stop all services
	docker-compose down

logs: ## Show logs from all services
	docker-compose logs -f

# Testing and Quality
test: ## Run tests with coverage
	docker-compose exec app pytest --cov=app --cov-report=term-missing

test-watch: ## Run tests in watch mode
	docker-compose exec app ptw --runner "pytest --cov=app --cov-report=term-missing"

lint: ## Run linting checks
	docker-compose exec app ruff check .
	docker-compose exec app black --check .
	docker-compose exec app mypy .

fmt: ## Format code
	docker-compose exec app ruff check . --fix
	docker-compose exec app black .

# Model Management
train: ## Train and save sklearn model
	docker-compose exec app python scripts/train_model.py

export-onnx: ## Export model to ONNX format
	docker-compose exec app python scripts/export_onnx.py

# Performance Testing
bench: ## Run k6 load test
	k6 run scripts/load_test.js

bench-local: ## Run local performance test
	docker-compose exec app python -m pytest tests/test_performance.py -v

# Local Development (without Docker)
dev-local: ## Start local development server
	uvicorn app.main:app --reload --host 0.0.0.0 --port 8000

worker-local: ## Start local celery worker
	celery -A worker.celery_app worker --loglevel=info

test-local: ## Run tests locally
	pytest --cov=app --cov-report=term-missing

lint-local: ## Run linting locally
	ruff check .
	black --check .
	mypy .

# Monitoring
prometheus: ## Open Prometheus dashboard
	open http://localhost:9090

grafana: ## Open Grafana dashboard
	open http://localhost:3000

metrics: ## Show current metrics
	curl http://localhost:8000/metrics

# Cleanup
clean: ## Clean up containers and volumes
	docker-compose down -v --remove-orphans
	docker system prune -f

install: ## Install dependencies locally
	pip install -e .[dev]

# API Testing
api-test: ## Test API endpoints manually
	@echo "Testing health endpoint..."
	curl -s http://localhost:8000/health | jq
	@echo "\nTesting model info..."
	curl -s http://localhost:8000/model/info | jq
	@echo "\nTesting sync prediction..."
	curl -s -X POST http://localhost:8000/api/v1/predict \
		-H "Content-Type: application/json" \
		-d '{"inputs": [5.1, 3.5, 1.4, 0.2]}' | jq

# Queue Management
queue-status: ## Check celery queue status
	docker-compose exec worker celery -A worker.celery_app inspect active

queue-purge: ## Purge all tasks from queue
	docker-compose exec worker celery -A worker.celery_app purge

# Database/Cache
redis-cli: ## Access Redis CLI
	docker-compose exec redis redis-cli

redis-flush: ## Flush Redis cache
	docker-compose exec redis redis-cli FLUSHALL

# Logs and Debugging
app-logs: ## Show app logs
	docker-compose logs -f app

worker-logs: ## Show worker logs
	docker-compose logs -f worker

shell: ## Access app container shell
	docker-compose exec app bash

# Production Helpers
health-check: ## Check service health
	@echo "App health:"
	@curl -s http://localhost:8000/health | jq
	@echo "\nApp readiness:"
	@curl -s http://localhost:8000/ready | jq